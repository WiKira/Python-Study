# -*- coding: utf-8 -*-
"""Dr_Semmelweis_Handwashing_Discovery_(start).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L84ylnL4RFfo2d7bAfgMR7vCHSu7eDC2

# Setup and Context

<img src="https://i.imgur.com/gugIA5r.png" width=700>

### Introduction

Dr Ignaz Semmelweis was a Hungarian physician born in 1818 who worked in the Vienna General Hospital. In the past people thought of illness as caused by "bad air" or evil spirits. But in the 1800s Doctors started looking more at anatomy, doing autopsies and started making arguments based on data. Dr Semmelweis suspected that something was going wrong with the procedures at Vienna General Hospital. Semmelweis wanted to figure out why so many women in maternity wards were dying from childbed fever (i.e., [puerperal fever](https://en.wikipedia.org/wiki/Postpartum_infections)).

<img src=https://i.imgur.com/lSyNUwR.png width=700>

Today you will become Dr Semmelweis. This is your office üëÜ. You will step into Dr Semmelweis' shoes and analyse the same data collected from 1841 to 1849.

### The Data Source

Dr Semmelweis published his research in 1861. I found the scanned pages of the [full text with the original tables in German](http://www.deutschestextarchiv.de/book/show/semmelweis_kindbettfieber_1861), but an excellent [English translation can be found here](http://graphics8.nytimes.com/images/blogs/freakonomics/pdf/the%20etiology,%20concept%20and%20prophylaxis%20of%20childbed%20fever.pdf).

<img src=https://i.imgur.com/6HfLtaC.png width=500>

### Upgrade plotly (only Google Colab Notebook)

Google Colab may not be running the latest version of plotly. If you're working in Google Colab, uncomment the line below, run the cell, and restart your notebook server.
"""

# %pip install --upgrade plotly

"""### Import Statements"""

import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

"""### Notebook Presentation"""

pd.options.display.float_format = '{:,.2f}'.format

# Create locators for ticks on the time axis


from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

"""### Read the Data"""

df_yearly = pd.read_csv('annual_deaths_by_clinic.csv')
# parse_dates avoids DateTime conversion later
df_monthly = pd.read_csv('monthly_deaths.csv',
                      parse_dates=['date'])

"""# Preliminary Data Exploration

**Challenge**: Check out these two DataFrames ‚òùÔ∏è.
* What is the shape of df_yearly and df_monthly? How many rows and columns?
* What are the column names?
* Which years are included in the dataset?
* Are there any NaN values or duplicates?
* What were the average number of births that took place per month?
* What were the average number of deaths that took place per month?
"""

print(df_yearly.shape)
df_yearly.info()
print(df_yearly.head())
print(df_yearly.tail())
print(df_yearly["year"].unique())

print(df_monthly.shape)
df_monthly.info()
print(df_monthly.head())
print(df_monthly.tail())

"""## Check for Nan Values and Duplicates"""

print(df_yearly.isna().values.any())
print(df_yearly.duplicated().values.any())

print(df_monthly.isna().values.any())
print(df_monthly.duplicated().values.any())

"""### Descriptive Statistics"""

df_yearly.describe()

df_monthly.describe()

"""### Percentage of Women Dying in Childbirth

**Challenge**: How dangerous was childbirth in the 1840s in Vienna?

* Using the annual data, calculate the percentage of women giving birth who died throughout the 1840s at the hospital.


In comparison, the United States recorded 18.5 maternal deaths per 100,000 or 0.018% in 2013 [(source).](
https://en.wikipedia.org/wiki/Maternal_death#:~:text=The%20US%20has%20the%20%22highest,17.8%20per%20100%2C000%20in%202009)
"""

perc = df_yearly["deaths"].sum() / df_yearly["births"].sum()
print(round(perc * 100, 2))

"""# Visualise the Total Number of Births ü§± and Deaths üíÄ over Time

### Plot the Monthly Data on Twin Axes

**Challenge**: Create a [Matplotlib chart](https://matplotlib.org/3.3.2/api/_as_gen/matplotlib.pyplot.plot.html) with twin y-axes. It should look something like this:

<img src=https://i.imgur.com/F9DOJxx.png width=700>

* Format the x-axis using locators for the years and months (Hint: we did this in the Google Trends notebook)
* Set the range on the x-axis so that the chart lines touch the y-axes
* Add gridlines
* Use `skyblue` and `crimson` for the line colours
* Use a dashed line style for the number of deaths
* Change the line thickness to 3 and 2 for the births and deaths respectively.
* Do you notice anything in the late 1840s?
"""

plt.figure(figsize=(18, 6))

ax1 = plt.gca()
ax2 = ax1.twinx()

ax1.plot(df_monthly["date"], df_monthly["births"], color="skyblue", linestyle='solid', linewidth=3)
ax2.plot(df_monthly["date"], df_monthly["deaths"], color="crimson", linestyle='dashed', linewidth=2)
plt.title('Total Number of Births and Deaths over Time')
ax1.set_ylabel("Births", color="skyblue", fontsize=14)
ax2.set_ylabel("Deaths", color="crimson", fontsize=14)

ax1.set_xlim(df_monthly["date"].min(), df_monthly["date"].max())
ax1.grid(True)

ax1.xaxis.set_major_locator(mdates.YearLocator())
ax1.xaxis.set_minor_locator(mdates.MonthLocator())

plt.show()



"""# The Yearly Data Split by Clinic

Now let's look at the annual data instead.

**Challenge**: Use plotly to create line charts of the births and deaths of the two different clinics at the Vienna General Hospital.
* Which clinic is bigger or more busy judging by the number of births?
* Has the hospital had more patients over time?
* What was the highest number of deaths recorded in clinic 1 and clinic 2?
"""

plt.figure(figsize=(18, 6))

fig = px.line(df_yearly,
              x=df_yearly["year"],
              y=df_yearly["births"],
              color=df_yearly["clinic"],
              title='Total Yearly Births by Clinic')

fig.show()

plt.figure(figsize=(18, 6))

fig = px.line(df_yearly,
              x=df_yearly["year"],
              y=df_yearly["deaths"],
              color=df_yearly["clinic"],
               title='Total Yearly Deaths by Clinic')

fig.show()

"""### Calculate the Proportion of Deaths at Each Clinic

**Challenge**: Calculate the proportion of maternal deaths per clinic. That way we can compare like with like.
* Work out the percentage of deaths for each row in the `df_yearly` DataFrame by adding a column called "pct_deaths".
* Calculate the average maternal death rate for clinic 1 and clinic 2 (i.e., the total number of deaths per the total number of births).
* Create another plotly line chart to see how the percentage varies year over year with the two different clinics.
* Which clinic has a higher proportion of deaths?
* What is the highest monthly death rate in clinic 1 compared to clinic 2?
"""

df_yearly["pct_deaths"] = df_yearly["deaths"] / df_yearly["births"]
df_yearly

death_rate_c1 =  df_yearly[df_yearly["clinic"] == "clinic 1"]["deaths"].sum() / df_yearly[df_yearly["clinic"] == "clinic 1"]["births"].sum()
death_rate_c2 =  df_yearly[df_yearly["clinic"] == "clinic 2"]["deaths"].sum() / df_yearly[df_yearly["clinic"] == "clinic 2"]["births"].sum()

print(death_rate_c1 * 100)
print(death_rate_c2 * 100)

"""### Plotting the Proportion of Yearly Deaths by Clinic"""

plt.figure(figsize=(18, 6))

fig = px.line(df_yearly,
              x=df_yearly["year"],
              y=df_yearly["pct_deaths"],
              color=df_yearly["clinic"],
               title='Proportion of Yearly Deaths by Clinic')

fig.show()



"""# The Effect of Handwashing

Dr Semmelweis made handwashing obligatory in the summer of 1947. In fact, he ordered people to wash their hands with clorine (instead of water).
"""

# Date when handwashing was made mandatory
handwashing_start = pd.to_datetime('1847-06-01')

"""**Challenge**:
* Add a column called "pct_deaths" to `df_monthly` that has the percentage of deaths per birth for each row.
* Create two subsets from the `df_monthly` data: before and after Dr Semmelweis ordered washing hand.
* Calculate the average death rate prior to June 1947.
* Calculate the average death rate after June 1947.
"""

df_monthly["pct_deaths"] = df_monthly["deaths"] / df_monthly["births"]
df_monthly

before_handwashing = df_monthly[df_monthly['date'] < handwashing_start]
after_handwashing = df_monthly[df_monthly['date'] >= handwashing_start]

before_death_ratio = before_handwashing["deaths"].sum() / before_handwashing["births"].sum()
after_death_ratio = after_handwashing["deaths"].sum() / after_handwashing["births"].sum()

print(f"Before: {before_death_ratio * 100}")
print(f"After: {after_death_ratio * 100}")



"""### Calculate a Rolling Average of the Death Rate

**Challenge**: Create a DataFrame that has the 6 month rolling average death rate prior to mandatory handwashing.

*Hint*: You'll need to set the dates as the index in order to avoid the date column being dropped during the calculation.
"""

before_handwashing = before_handwashing.set_index('date')
after_handwashing = after_handwashing.set_index('date')

df_before_handwashing = before_handwashing.rolling(window=6).mean()
df_before_handwashing

df_after_handwashing = after_handwashing.rolling(window=6).mean()
df_after_handwashing



"""### Highlighting Subsections of a Line Chart

**Challenge**: Copy-paste and then modify the Matplotlib chart from before to plot the monthly death rates (instead of the total number of births and deaths). The chart should look something like this:

<img src=https://i.imgur.com/X6TQe0R.png width=500>

* Add 3 seperate lines to the plot: the death rate before handwashing, after handwashing, and the 6-month moving average before handwashing.
* Show the monthly death rate before handwashing as a thin dashed black line.
* Show the moving average as a thicker, crimon line.
* Show the rate after handwashing as a skyblue line with round markers.
* Look at the [code snippet in the documentation to see how you can add a legend](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.legend.html) to the chart.
"""

plt.figure(figsize=(14,8), dpi=200)
plt.title('Percentage of Monthly Deaths over Time', fontsize=18)
plt.yticks(fontsize=14)
plt.xticks(fontsize=14, rotation=45)

plt.ylabel('Percentage of Deaths', color='crimson', fontsize=18)

bf_line, = plt.plot(before_handwashing.index, before_handwashing["pct_deaths"], color="black", linestyle='dashed', linewidth=1, label="Before Handwashing")
af_line, = plt.plot(after_handwashing.index, after_handwashing["pct_deaths"], color="skyblue", linestyle='solid', linewidth=1, marker='o', label="After Handwashing")
ma_bf_line, = plt.plot(df_before_handwashing.index, df_before_handwashing["pct_deaths"], color="crimson", linestyle='dashed', linewidth=2, label="6M Moving Avg. Before Handwashing")
ma_af_line, = plt.plot(df_after_handwashing.index, df_after_handwashing["pct_deaths"], color="orange", linestyle='dashed', linewidth=2, label="6M Moving Avg. After Handwashing")
plt.title('Total Number of Births and Deaths over Time')

ax = plt.gca()

ax.xaxis.set_major_locator(mdates.YearLocator())
ax.xaxis.set_minor_locator(mdates.MonthLocator())

plt.grid(color='grey', linestyle='--')

plt.xlim(before_handwashing.index.min(), after_handwashing.index.max())
plt.grid(True)

plt.legend(handles=[bf_line, af_line, ma_bf_line, ma_af_line], fontsize=14)

plt.show()

"""### Statistics - Calculate the Difference in the Average Monthly Death Rate

**Challenge**:
* What was the average percentage of monthly deaths before handwashing?
* What was the average percentage of monthly deaths after handwashing was made obligatory?
* By how much did handwashing reduce the average chance of dying in childbirth in percentage terms?
* How do these numbers compare to the average for all the 1840s that we calculated earlier?
* How many times lower are the chances of dying after handwashing compared to before?
"""

print(before_handwashing["pct_deaths"].mean())
print(after_handwashing["pct_deaths"].mean())

print(before_handwashing["pct_deaths"].mean() - after_handwashing["pct_deaths"].mean())

print(100 * (before_handwashing["pct_deaths"].mean() - after_handwashing["pct_deaths"].mean()) / before_handwashing["pct_deaths"].mean())

print(before_handwashing["pct_deaths"].mean() / after_handwashing["pct_deaths"].mean())

"""### Use Box Plots to Show How the Death Rate Changed Before and After Handwashing

**Challenge**:
* Use [NumPy's `.where()` function](https://numpy.org/doc/stable/reference/generated/numpy.where.html) to add a column to `df_monthly` that shows if a particular date was before or after the start of handwashing.
* Then use plotly to create box plot of the data before and after handwashing.
* How did key statistics like the mean, max, min, 1st and 3rd quartile changed as a result of the new policy?


"""

df_monthly["handwashing"] = np.where(df_monthly["date"] < handwashing_start, 'B', 'A')
df_monthly

box = px.box(df_monthly, x=df_monthly["handwashing"], y=df_monthly["pct_deaths"], color=df_monthly['handwashing'], title='How Have the Stats Changed with Handwashing?')

box.update_layout(xaxis_title='Before or After Handwasing Discovery?',
                  yaxis_title='Percentage of Monthly Deaths',)

box

df_monthly[df_monthly["handwashing"] == 'B'].describe()

df_monthly[df_monthly["handwashing"] == 'A'].describe()

"""### Use Histograms to Visualise the Monthly Distribution of Outcomes

**Challenge**: Create a [plotly histogram](https://plotly.com/python/histograms/) to show the monthly percentage of deaths.

* Use docs to check out the available parameters. Use the [`color` parameter](https://plotly.github.io/plotly.py-docs/generated/plotly.express.histogram.html) to display two overlapping histograms.
* The time period of handwashing is shorter than not handwashing. Change `histnorm` to `percent` to make the time periods comparable.
* Make the histograms slighlty transparent
* Experiment with the number of bins on the histogram. Which number work well in communicating the range of outcomes?
* Just for fun, display your box plot on the top of the histogram using the `marginal` parameter.
"""

hist = px.histogram(df_monthly,
                    x=df_monthly["pct_deaths"],
                    color=df_monthly["handwashing"],
                    histnorm='percent',
                    opacity=0.6,
                    nbins=40,
                    marginal='rug',
                    barmode='overlay')

hist.update_layout(xaxis_title='Proportion of Monthly Deaths',
                   yaxis_title='Count',)

hist.show()



"""### Use a Kernel Density Estimate (KDE) to visualise a smooth distribution

**Challenge**: Use [Seaborn's `.kdeplot()`](https://seaborn.pydata.org/generated/seaborn.kdeplot.html) to create two kernel density estimates of the `pct_deaths`, one for before handwashing and one for after.

* Use the `shade` parameter to give your two distributions different colours.
* What weakness in the chart do you see when you just use the default parameters?
* Use the `clip` parameter to address the problem.

"""

plt.figure(dpi=200)
# sns.kdeplot(df_monthly,x=df_monthly["pct_deaths"], hue=df_monthly["handwashing"], fill=True, clip=(0,1))
sns.kdeplot(before_handwashing.pct_deaths, fill=True, clip=(0,1))
sns.kdeplot(after_handwashing.pct_deaths, fill=True, clip=(0,1))
plt.xlim(0, 0.40)

plt.figure(dpi=200)
# By default the distribution estimate includes a negative death rate!
sns.kdeplot(before_handwashing.pct_deaths, shade=True, clip=(0,1))
sns.kdeplot(after_handwashing.pct_deaths, shade=True, clip=(0,1))
plt.title('Est. Distribution of Monthly Death Rate Before and After Handwashing')
plt.xlim(0, 0.40)
plt.show()

"""### Use a T-Test to Show Statistical Significance

**Challenge**: Use a t-test to determine if the differences in the means are statistically significant or purely due to chance.

If the p-value is less than 1% then we can be 99% certain that handwashing has made a difference to the average monthly death rate.

* Import `stats` from scipy
* Use the [`.ttest_ind()` function](https://docs.scipy.org/]doc/scipy/reference/generated/scipy.stats.ttest_ind.html) to calculate the t-statistic and the p-value
* Is the difference in the average proportion of monthly deaths statistically significant at the 99% level?


"""

from scipy import stats

stats.ttest_ind(before_handwashing, after_handwashing)

t_stat, p_value = stats.ttest_ind(a=before_handwashing.pct_deaths,
                                  b=after_handwashing.pct_deaths)
print(f'p-palue is {p_value:.10f}')
print(f't-statstic is {t_stat:.4}')

"""What do you conclude from your analysis, Doctor? üòä

<img src=https://i.imgur.com/rvjNVzQ.gif>
"""

